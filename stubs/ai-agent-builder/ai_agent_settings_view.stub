@extends('layouts.app')

@section('content')
<div class="container mx-auto px-4 py-8">
    <div class="max-w-3xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">AI Agent Settings</h1>
            <p class="mt-2 text-gray-600">Configure your AI agent's behavior and parameters</p>
        </div>

        <form id="settings-form" class="space-y-8">
            <!-- Model Settings -->
            <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-lg font-medium text-gray-900 mb-4">Model Settings</h2>
                
                <div class="space-y-4">
                    <!-- Model Selection -->
                    <div>
                        <label for="model" class="block text-sm font-medium text-gray-700">AI Model</label>
                        <select id="model" name="model" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <option value="gpt-4">GPT-4</option>
                            <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                            <option value="claude-2">Claude 2</option>
                        </select>
                    </div>

                    <!-- Temperature -->
                    <div>
                        <label for="temperature" class="block text-sm font-medium text-gray-700">Temperature</label>
                        <input type="range" id="temperature" name="temperature" min="0" max="1" step="0.1" class="mt-1 block w-full">
                        <div class="flex justify-between text-xs text-gray-500 mt-1">
                            <span>More Focused</span>
                            <span>More Creative</span>
                        </div>
                    </div>

                    <!-- Max Tokens -->
                    <div>
                        <label for="max_tokens" class="block text-sm font-medium text-gray-700">Max Tokens</label>
                        <input type="number" id="max_tokens" name="max_tokens" min="1" max="4000" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    </div>
                </div>
            </div>

            <!-- Response Settings -->
            <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-lg font-medium text-gray-900 mb-4">Response Settings</h2>
                
                <div class="space-y-4">
                    <!-- Response Format -->
                    <div>
                        <label for="response_format" class="block text-sm font-medium text-gray-700">Response Format</label>
                        <select id="response_format" name="response_format" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <option value="text">Plain Text</option>
                            <option value="markdown">Markdown</option>
                            <option value="html">HTML</option>
                            <option value="json">JSON</option>
                        </select>
                    </div>

                    <!-- Language -->
                    <div>
                        <label for="language" class="block text-sm font-medium text-gray-700">Response Language</label>
                        <select id="language" name="language" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <option value="en">English</option>
                            <option value="es">Spanish</option>
                            <option value="fr">French</option>
                            <option value="de">German</option>
                            <option value="it">Italian</option>
                            <option value="pt">Portuguese</option>
                            <option value="ru">Russian</option>
                            <option value="zh">Chinese</option>
                            <option value="ja">Japanese</option>
                            <option value="ko">Korean</option>
                        </select>
                    </div>

                    <!-- Tone -->
                    <div>
                        <label for="tone" class="block text-sm font-medium text-gray-700">Response Tone</label>
                        <select id="tone" name="tone" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                            <option value="professional">Professional</option>
                            <option value="friendly">Friendly</option>
                            <option value="formal">Formal</option>
                            <option value="casual">Casual</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Advanced Settings -->
            <div class="bg-white shadow rounded-lg p-6">
                <h2 class="text-lg font-medium text-gray-900 mb-4">Advanced Settings</h2>
                
                <div class="space-y-4">
                    <!-- System Prompt -->
                    <div>
                        <label for="system_prompt" class="block text-sm font-medium text-gray-700">System Prompt</label>
                        <textarea id="system_prompt" name="system_prompt" rows="4" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm"></textarea>
                    </div>

                    <!-- Context Window -->
                    <div>
                        <label for="context_window" class="block text-sm font-medium text-gray-700">Context Window Size</label>
                        <input type="number" id="context_window" name="context_window" min="1" max="100" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    </div>

                    <!-- Memory Settings -->
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Memory Settings</label>
                        <div class="flex items-center">
                            <input type="checkbox" id="enable_memory" name="enable_memory" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                            <label for="enable_memory" class="ml-2 block text-sm text-gray-900">Enable Conversation Memory</label>
                        </div>
                        <div class="flex items-center">
                            <input type="checkbox" id="enable_learning" name="enable_learning" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                            <label for="enable_learning" class="ml-2 block text-sm text-gray-900">Enable Learning from Interactions</label>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Save Button -->
            <div class="flex justify-end">
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Save Settings
                </button>
            </div>
        </form>
    </div>
</div>

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('settings-form');

    // Load current settings
    fetch('/api/ai-agent/settings')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                populateForm(data.data);
            }
        });

    function populateForm(settings) {
        // Populate form fields with current settings
        Object.keys(settings).forEach(key => {
            const element = document.getElementById(key);
            if (element) {
                if (element.type === 'checkbox') {
                    element.checked = settings[key];
                } else {
                    element.value = settings[key];
                }
            }
        });
    }

    // Handle form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();

        const formData = new FormData(form);
        const settings = Object.fromEntries(formData.entries());

        // Convert checkbox values to boolean
        settings.enable_memory = formData.get('enable_memory') === 'on';
        settings.enable_learning = formData.get('enable_learning') === 'on';

        // Save settings
        fetch('/api/ai-agent/settings', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify(settings)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message
                alert('Settings saved successfully!');
            } else {
                // Show error message
                alert('Failed to save settings. Please try again.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while saving settings.');
        });
    });
});
</script>
@endpush
@endsection 