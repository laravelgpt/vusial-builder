@extends('layouts.app')

@section('content')
<div class="container mx-auto px-4 py-8">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900">AI Agent Training</h1>
            <p class="mt-2 text-gray-600">Train and fine-tune your AI agent with custom data</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Training Data Upload -->
            <div class="lg:col-span-2">
                <div class="bg-white shadow rounded-lg p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Training Data</h2>
                    
                    <!-- Upload Form -->
                    <form id="upload-form" class="space-y-4">
                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-6">
                            <div class="text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                </svg>
                                <div class="mt-4">
                                    <label for="file-upload" class="relative cursor-pointer bg-white rounded-md font-medium text-blue-600 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                                        <span>Upload training data</span>
                                        <input id="file-upload" name="file-upload" type="file" class="sr-only" accept=".json,.csv,.txt">
                                    </label>
                                    <p class="text-xs text-gray-500 mt-1">JSON, CSV, or TXT files up to 10MB</p>
                                </div>
                            </div>
                        </div>

                        <!-- Data Format -->
                        <div>
                            <label for="data_format" class="block text-sm font-medium text-gray-700">Data Format</label>
                            <select id="data_format" name="data_format" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                                <option value="qa">Question-Answer Pairs</option>
                                <option value="conversation">Conversation History</option>
                                <option value="custom">Custom Format</option>
                            </select>
                        </div>

                        <!-- Training Parameters -->
                        <div class="space-y-4">
                            <h3 class="text-sm font-medium text-gray-700">Training Parameters</h3>
                            
                            <!-- Epochs -->
                            <div>
                                <label for="epochs" class="block text-sm font-medium text-gray-700">Epochs</label>
                                <input type="number" id="epochs" name="epochs" min="1" max="100" value="10" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                            </div>

                            <!-- Batch Size -->
                            <div>
                                <label for="batch_size" class="block text-sm font-medium text-gray-700">Batch Size</label>
                                <input type="number" id="batch_size" name="batch_size" min="1" max="128" value="32" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                            </div>

                            <!-- Learning Rate -->
                            <div>
                                <label for="learning_rate" class="block text-sm font-medium text-gray-700">Learning Rate</label>
                                <input type="number" id="learning_rate" name="learning_rate" min="0.0001" max="0.1" step="0.0001" value="0.001" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                            </div>
                        </div>

                        <!-- Start Training Button -->
                        <div class="flex justify-end">
                            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Start Training
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Training Progress -->
            <div class="lg:col-span-1">
                <div class="bg-white shadow rounded-lg p-6">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Training Progress</h2>
                    
                    <!-- Current Status -->
                    <div class="mb-6">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-sm font-medium text-gray-700">Status</span>
                            <span id="training-status" class="text-sm text-gray-500">Not Started</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div id="progress-bar" class="bg-blue-600 h-2 rounded-full" style="width: 0%"></div>
                        </div>
                    </div>

                    <!-- Metrics -->
                    <div class="space-y-4">
                        <div>
                            <span class="text-sm font-medium text-gray-700">Epoch</span>
                            <span id="current-epoch" class="float-right text-sm text-gray-500">-</span>
                        </div>
                        <div>
                            <span class="text-sm font-medium text-gray-700">Loss</span>
                            <span id="current-loss" class="float-right text-sm text-gray-500">-</span>
                        </div>
                        <div>
                            <span class="text-sm font-medium text-gray-700">Accuracy</span>
                            <span id="current-accuracy" class="float-right text-sm text-gray-500">-</span>
                        </div>
                        <div>
                            <span class="text-sm font-medium text-gray-700">Time Elapsed</span>
                            <span id="time-elapsed" class="float-right text-sm text-gray-500">-</span>
                        </div>
                    </div>

                    <!-- Training History -->
                    <div class="mt-6">
                        <h3 class="text-sm font-medium text-gray-700 mb-2">Training History</h3>
                        <div class="space-y-2">
                            <div id="training-history" class="text-sm text-gray-500">
                                <!-- Training history items will be added here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('upload-form');
    let trainingInterval;

    // Handle file upload
    const fileInput = document.getElementById('file-upload');
    fileInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            // Validate file size
            if (file.size > 10 * 1024 * 1024) { // 10MB
                alert('File size must be less than 10MB');
                fileInput.value = '';
                return;
            }
        }
    });

    // Handle form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();

        const formData = new FormData(form);
        
        // Start training
        fetch('/api/ai-agent/train', {
            method: 'POST',
            headers: {
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
            },
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                startTrainingProgress(data.training_id);
            } else {
                alert('Failed to start training. Please try again.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while starting training.');
        });
    });

    function startTrainingProgress(trainingId) {
        // Update UI to show training has started
        document.getElementById('training-status').textContent = 'Training';
        document.getElementById('progress-bar').style.width = '0%';

        // Start polling for progress
        trainingInterval = setInterval(() => {
            fetch(`/api/ai-agent/training-progress/${trainingId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateTrainingProgress(data.data);
                        
                        // Check if training is complete
                        if (data.data.status === 'completed') {
                            clearInterval(trainingInterval);
                            document.getElementById('training-status').textContent = 'Completed';
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    clearInterval(trainingInterval);
                });
        }, 1000);
    }

    function updateTrainingProgress(data) {
        // Update progress bar
        document.getElementById('progress-bar').style.width = `${data.progress}%`;
        
        // Update metrics
        document.getElementById('current-epoch').textContent = data.current_epoch;
        document.getElementById('current-loss').textContent = data.loss.toFixed(4);
        document.getElementById('current-accuracy').textContent = `${(data.accuracy * 100).toFixed(2)}%`;
        document.getElementById('time-elapsed').textContent = formatTime(data.time_elapsed);

        // Add to training history
        const historyItem = document.createElement('div');
        historyItem.className = 'border-b border-gray-200 pb-2';
        historyItem.innerHTML = `
            <div class="flex justify-between">
                <span>Epoch ${data.current_epoch}</span>
                <span>${(data.accuracy * 100).toFixed(2)}%</span>
            </div>
        `;
        document.getElementById('training-history').prepend(historyItem);
    }

    function formatTime(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = seconds % 60;
        
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
});
</script>
@endpush
@endsection 